### USER
以下是多个基于 p5.js 的创意编程题目，主题围绕“随机”展开：

###1. 随机星空生成器
**内容描述**：这个项目将生成一个动态的星空，每颗星星的位置、亮度和大小都是随机生成的。用户可以通过点击鼠标来刷新星空，每次点击都会产生一个全新的星空。
**交互方式**：鼠标点击。
**主要创意点**：利用随机数生成不同的星星位置、亮度和大小，使每次点击都有独特的视觉效果。
**视觉效果**：满天星斗，星星的亮度和大小不一，星空背景渐变。点击鼠标后，星空瞬间改变，呈现新的星星排列。

### ASSISTANT
为了实现这个项目，我们可以遵循以下步骤：

1. 初始化画布：使用p5.js创建一个画布，并设置其大小。

2. 定义一个`Star`类：在这个类中定义星星的属性，如位置（x, y坐标）、亮度、大小等，以及绘制星星的方法。

3. 随机生成星星：在`setup()`函数中，使用循环来创建一定数量的星星对象，并为每颗星星随机分配位置、亮度和大小。

4. 实现交互功能：在`mouseClicked()`函数中，当用户点击鼠标时，清除画布并重新生成一组新的星星。

5. 渲染星空背景：使用渐变颜色填充画布，以模拟真实的夜空效果。

下面是一个简单的代码示例：

```javascript
let stars = [];

function setup() {
  createCanvas(windowWidth, windowHeight);
  background(0); // 黑色背景
  
  // 随机生成星星
  for (let i = 0; i < 1000; i++) {
    let x = random(width);
    let y = random(height);
    let brightness = random(255);
    let size = random(1, 3); // 星星大小范围在1到3像素之间
    stars.push(new Star(x, y, brightness, size));
  }
}

function draw() {
  // 渲染星空背景
  for (let i = height - 1; i >= 0; i--) {
    let c = lerpColor(color(20, 30, 100), color(0, 10, 50), i / height);
    stroke(c);
    line(0, i, width, i);
  }
  
  // 绘制星星
  for (let star of stars) {
    star.show();
  }
}

function Star(x, y, brightness, size) {
  this.x = x;
  this.y = y;
  this.brightness = brightness;
  this.size = size;

  this.show = function() {
    stroke(this.brightness);
    strokeWeight(this.size);
    point(this.x, this.y);
  };
}

function mouseClicked() {
  // 当鼠标点击时，清除画布并重新生成星空
  background(0);
  stars = [];
  
  for (let i = 0; i < 1000; i++) {
    let x = random(width);
    let y = random(height);
    let brightness = random(255);
    let size = random(1, 3); 
    stars.push(new Star(x, y, brightness, size));
  }
}
```

这个示例代码创建了一个星空，其中包含1000颗星星，每次点击鼠标时都会重新生成这些星星的位置、亮度和大小。背景使用渐变颜色来模拟夜空效果。

### USER
我想要每次鼠标点击都改变星星大小和颜色，大小改变在像素1到7之间，颜色随机。给出一个优化好的代码

### ASSISTANT
当然可以！我们需要修改一下`Star`类的构造函数以及`mouseClicked()`函数，以便于每次鼠标点击时，星星的大小和颜色都能发生变化。这是相应的代码：

```javascript
let stars = [];

function setup() {
  createCanvas(windowWidth, windowHeight);
  background(0); // 黑色背景

  // 随机生成星星
  for (let i = 0; i < 1000; i++) {
    let x = random(width);
    let y = random(height);
    let size = random(1, 7); // 星星大小范围在1到7像素之间
    stars.push(new Star(x, y, size));
  }
}

function draw() {
  // 渲染星空背景
  for (let i = height - 1; i >= 0; i--) {
    let c = lerpColor(color(20, 30, 100), color(0, 10, 50), i / height);
    stroke(c);
    line(0, i, width, i);
  }

  // 绘制星星
  for (let star of stars) {
    star.show();
  }
}

function Star(x, y, size) {
  this.x = x;
  this.y = y;
  this.size = size;

  this.show = function() {
    let brightness = color(random(255), random(255), random(255)); // 星星颜色随机
    stroke(brightness);
    strokeWeight(this.size);
    point(this.x, this.y);
  };
}

function mouseClicked() {
  // 当鼠标点击时，清除画布并重新生成星空
  background(0);
  stars = [];

  for (let i = 0; i < 1000; i++) {
    let x = random(width);
    let y = random(height);
    let size = random(1, 7); // 星星大小范围在1到7像素之间
    stars.push(new Star(x, y, size));
  }
}
```

这段代码的改动主要包括：

- 在`Star`类中移除了亮度属性，添加了一个颜色（brightness）的属性，并使其随机生成。
  
- 在`mouseClicked()`函数中，每次点击时星星大小和颜色的生成逻辑与初始生成相同。

这样每当用户点击鼠标时，会出现新的星空，其中每颗星的大小在1到7像素之间变化，并且颜色完全随机。

### USER
我想要在上面的基础上，让其中一小部分星星跟着鼠标动

### ASSISTANT
为了实现这个功能，我们可以创建一个新的类，比如`FollowingStar`，它继承自`Star`，并且有自己的行为逻辑，即跟随鼠标的移动。以下是如何修改代码以实现这一点：

```javascript
let stars = [];
let followingStars = [];

function setup() {
  createCanvas(windowWidth, windowHeight);
  background(0); // 黑色背景
  
  for (let i = 0; i < 1000; i++) {
    let x = random(width);
    let y = random(height);
    let size = random(1, 7); 
    if (i < 200) { // 让前200颗星星跟随鼠标
      followingStars.push(new FollowingStar(x, y, size));
    } else {
      stars.push(new Star(x, y, size));
    }
  }
}

function draw() {
  for (let i = height - 1; i >= 0; i--) {
    let c = lerpColor(color(20, 30, 100), color(0, 10, 50), i / height);
    stroke(c);
    line(0, i, width, i);
  }

  for (let star of stars) {
    star.show();
  }
  
  for (let star of followingStars) {
    star.update(); // 更新跟随星星的位置
    star.show();
  }
}

function Star(x, y, size) {
  this.x = x;
  this.y = y;
  this.size = size;

  this.show = function() {
    let brightness = color(random(255), random(255), random(255)); 
    stroke(brightness);
    strokeWeight(this.size);
    point(this.x, this.y);
  };
}

function FollowingStar(x, y, size) {
  Star.call(this, x, y, size); // 调用父类构造函数
  
  this.update = function() {
    let distance = dist(mouseX, mouseY, this.x, this.y);
    if (distance > 5 && distance < 100) { // 跟随鼠标但保持一定距离
      let angle = atan2(mouseY - this.y, mouseX - this.x);
      this.x += cos(angle);
      this.y += sin(angle);
    }
  };
}

function mouseClicked() {
  background(0); 
  stars = [];
  followingStars = [];

  for (let i = 0; i < 1000; i++) {
    let x = random(width);
    let y = random(height);
    let size = random(1, 7); 
    if (i < 200) { // 让前200颗星星跟随鼠标
      followingStars.push(new FollowingStar(x, y, size));
    } else {
      stars.push(new Star(x, y, size));
    }
  }
}
```

这段代码引入了一个新的`FollowingStar`类，它继承自`Star`，并且有一个额外的`update()`方法，该方法会根据鼠标位置更新星星的位置。我们还修改了`setup()`和`mouseClicked()`函数，以便于在每次点击时重新创建跟随星星。

现在，每当用户点击屏幕时，大约前200颗星星将开始跟随鼠标移动，而其余的星星则会保持静止，直到下一次点击。

